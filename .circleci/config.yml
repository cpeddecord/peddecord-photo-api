version: 2
jobs:
  # run unit tests, build, and create an md5 hash from the binary
  build_and_test:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/cpeddecord/peddecord-photo-api
    steps:
      - checkout
      - run:
          name: unit-tests
          command: go test
      - run:
          name: build
          command: go build
      - run:
          name: generate-hash
          command: mkdir -p workspace && md5sum peddecord-photo-api > workspace/new_hash
      - store_artifacts:
          path: workspace/new_hash

  # coming soon, fail the build if our build output is equivalent to the last build
  check_hash:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/cpeddecord/peddecord-photo-api

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          name: create-default-hash-file
          command: |
            if [ ! -f /tmp/workspace/current_hash ]; then
              echo "no existing hash found, creating empty file"
              touch /tmp/workspace/current_hash
            fi
      - run:
          name: check-hashes
          command: |
            if [ $(cat /tmp/workspace/current_hash) == $(cat /tmp/workspace/new_hash) ]; then
              echo "build file equivalent to previous, aborting"
              exit 1
            else
              echo "previous build hash - $(cat /tmp/workspace/current_hash)"
              echo "new build hash - $(cat /tmp/workspace/new_hash)"
              mkdir -p workspace
              cat /tmp/workspace/new_hash > workspace/current_hash
            fi
      - persist_to_workspace:
          root: workspace
          paths:
            - current_hash

  # Build our container, upload to GC registry, poke Kube into deploying out new stuff
  deploy_to_gke:
    docker:
      - image: google/cloud-sdk

    environment:
      PROJECT_NAME: "peddecord-photo-api"
      GOOGLE_PROJECT_ID: "peddecord-photo"
      GOOGLE_COMPUTE_ZONE: "us-east1-b"
      GOOGLE_CLUSTER_NAME: "le-cluster"

    steps:
      - checkout
      - run:
          name: Setup GKE SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Docker build/push
          command: |
            docker build \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
              -t ${PROJECT_NAME} .
            docker tag ${PROJECT_NAME} eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
            docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
      - run:
          name: Deploy to Kubernetes
          command: |
            envsubst < ${HOME}/project/kube.yml > ${HOME}/patched_kube.yml
            kubectl apply -f ${HOME}/patched_kube.yml
            kubectl rollout status deployment/${PROJECT_NAME}

workflows:
  version: 2
  api_deploy_jerrrrb:
    jobs:
      - build_and_test

      - check_hash:
          requires:
            - build_and_test
          filters:
            branches:
              only: master

      - deploy_to_gke:
          requires:
            - check_hash
            - build_and_test

          filters:
            branches:
              only: master
